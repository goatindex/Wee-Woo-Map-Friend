# Cursor Rules for mapexp.github.io

## Collaboration & Decision-Making Guidelines

1. **Confirm Before Changes**: Always confirm with the user before making any code changes. Analysis does not require approval. Use the Approval & Change Control policy below (explicit approval phrases + preflight + dry‑run by default).
2. **Discuss Implementation Options**: Present multiple options for implementing requested changes, explaining the pros, cons, and tradeoffs of each.
3. **Explain Proposals**: Clearly explain all proposals and code changes to help the user learn and make informed decisions.
4. **Secure Coding Practices**: Use secure coding practices (e.g., input validation, avoiding eval, using HTTPS for APIs, escaping user input) and mention when/why these are applied.
5. **Suggest and Discuss Error Handling**: Always suggest and discuss error handling strategies wherever they are not already implemented, including how to handle failures gracefully and provide user feedback.
6. **Consistency, Modularity, Extensibility**: Make code consistent in style, modular in structure, and extensible for future features or changes.
7. **Documentation Standards**: Use clear code comments, JSDoc for functions, and update the README for major changes to improve maintainability and onboarding.
8. **Performance Considerations**: Optimize for speed and responsiveness, especially for map rendering and data loading. Discuss tradeoffs between code clarity and performance when relevant.
9. **Learning Mode**: In preflights, include a brief teaching note (what/why, key concepts, trade‑offs). Prefer concrete, project‑specific examples over abstract theory.
10. **Tool Selection Strategy**: ALWAYS use GitHub MCP for git operations and appropriate testing tools for validation. Avoid terminal git commands and use proper testing tools when available.

---

## Tool Usage Guidelines

### **Git Operations: Use GitHub MCP ONLY**
- ✅ Use `mcp_GitHub_*` tools for all git operations
- ❌ NEVER use `run_terminal_cmd` for git commands
- ✅ Create branches, PRs, merges via GitHub MCP
- ✅ Get file contents, search code via GitHub MCP

### **Testing & Validation: Use Appropriate Tools**
- ✅ Use browser testing tools when properly configured
- ✅ Use terminal commands for basic server testing
- ✅ Use GitHub MCP for code analysis and file inspection
- ❌ NEVER use `curl` or terminal commands for browser testing

### **Terminal Commands: Use Sparingly**
- ✅ Development server: `npm run dev`, `python -m http.server`
- ✅ File operations: `ls`, `cat`, `mkdir` (when MCP unavailable)
- ✅ Package management: `npm install`, `npm test` (when MCP unavailable)
- ❌ Git operations: Use GitHub MCP instead
- ❌ Testing: Use appropriate testing tools instead

### **Context7 MCP: External Library Documentation**
- ✅ Use `mcp_Context7_resolve-library-id` to get library IDs
- ✅ Use `mcp_Context7_get-library-docs` for external library documentation
- ✅ Research Redux Toolkit, InversifyJS, Leaflet.js, Turf.js patterns
- ✅ Get up-to-date API documentation and best practices
- ❌ Don't rely on outdated knowledge for external libraries

---

## Approval & Change Control

Default to read‑only. Do not modify files unless explicitly approved.

- **Small changes are not exempt**: Do not auto‑apply "quick fixes" or "safe" edits without approval.
- **No state‑changing actions without approval**: Do not run terminal commands, install packages, or create/delete files until approved.
- **Delta‑only edits**: Only modify lines directly related to the approved scope; avoid unrelated reformatting or drive‑by changes.

- Approval phrases (explicit): "Approved", "Implement", "Proceed", "Go ahead", "Ship it", "Apply", "Make the change".
- Non‑approval examples: questions or feedback such as "What do you think?", "Any suggestions?", "Can you explain?", "Review this", "Demo only".

Preflight requirement (before any edit, ask to proceed):

- Summary: what will change and why.
- Files: exact list of files to touch (add/update/delete).
- Behavior impact: none or concise note.
- Risks: 1–2 bullets; Rollback: how to revert.
- End with "Proceed?" and wait for an explicit approval phrase.

Modes:

- Dry‑run by default: present plan and expected diffs; do not apply.
- Apply mode only after approval; apply exactly the approved scope.

Scope control:

- Only modify the files listed in the approved preflight.
- If additional changes are discovered, pause and send a new preflight for approval.

Post‑implementation questions are not approval:

- Treat follow‑up questions/observations as discussion only. Do not make further edits without explicit approval.

Emergency/Hotfix policy:

- If a just‑made change breaks the build/runtime, immediately auto‑revert that specific change and report. All other fixes still require approval.

PR‑first preference (when VCS is present):

- Prefer creating a branch and preview/PR over direct edits, unless the user says "commit directly".

---

### Templates

#### Preflight Checklist (teaching)

- Goal + assumptions
- Files to touch (add/update/delete)
- Proposed changes (bullets) + short teaching note (what/why/trade‑offs)
- Behavior impact (user‑visible changes)
- Risks (1–2) + Rollback
- Test/verify steps (build/lint/runtime)
- End with "Proceed?" and wait for explicit approval

#### Post‑implementation Report

- Changes applied (bullet summary)
- Verification results (build, lint, runtime) and any diffs
- Human‑readable diff summary (no raw patches)
- Follow‑ups or deferrals (with suggested next steps)

---

## Project Overview

This project is a Leaflet.js-based web map for visualizing SES, LGA, CFA, and Ambulance boundaries in Victoria, Australia. It uses vanilla JS, HTML, CSS, and GeoJSON data layers. The sidebar allows users to activate polygons, emphasise features, and show/hide labels.

## AI Assistant Guidelines

- **Code Style**: Use ES6+ syntax, keep code modular, and prefer named exports for functions.
- **UI/UX**: Sidebar should be responsive, with sticky headers and collapsible sections. All controls should be accessible and visually clear.
- **Map Logic**: Use Leaflet for map rendering and layer management. Use Turf.js for geometry calculations (overlap, adjacency, containment).
- **Data Loading**: Load GeoJSON layers asynchronously. Handle errors gracefully and show user feedback if data fails to load.
- **Sidebar Logic**: Only show checked/active items in the 'All Active' section. Emphasise and label toggles should update the map and sidebar immediately.
- **Custom Points**: (If re-implemented) Use Nominatim for geocoding, and integrate custom points into the sidebar using the same UI logic as other features.
- **Error Handling**: Always check for null/undefined before accessing DOM elements or map layers. Log errors to the console for debugging.
- **Accessibility**: Use semantic HTML and ARIA attributes where possible. Ensure keyboard navigation works for all sidebar controls.

## Common Tasks

- "Add a new sidebar section for [feature] with collapsible logic."
- "Implement polygon activation by overlap/adjacency using Turf.js."
- "Fix syntax errors in [file] and restore sidebar/map functionality."
- "Integrate custom points search using Nominatim and add to sidebar."
- "Make the sidebar sticky and responsive for desktop/mobile."
- "Show/hide labels for active features using a checkbox."

## Best Practices

- Keep UI logic in `js/ui/` and map logic in `js/` or `js/loaders/`.
- Use comments to explain complex logic, especially geometry calculations.
- Avoid placeholder comments and ensure all braces are properly closed.
- Test changes in the browser and check for console errors after each edit.

## Troubleshooting

- If the map does not load, check Leaflet and tile server URLs, and inspect the browser console for errors.
- If sidebar controls do not work, check for missing event listeners or DOM element IDs.
- If syntax errors occur, use the AI assistant to clean up braces and imports.

### ⚠️ Critical: HTML File Corruption Prevention

**BEFORE declaring files "corrupted" or making wholesale replacements:**

1. **STOP and investigate systematically** - layout issues are often single malformed tags
2. **Check meta tags first** - especially viewport tag which controls layout scaling
3. **Look for misplaced content** - string replacements can insert content in wrong locations
4. **Make minimal, targeted fixes** rather than wholesale file replacements

**Common "corruption" patterns that are actually simple fixes:**

- **Layout broken/everything tiny**: Usually corrupted viewport meta tag
  - Fix: Restore `<meta name="viewport" content="width=device-width, initial-scale=1,user-scalable=no" />`
- **Content in wrong places**: String replacement boundaries were too broad
  - Fix: Remove misplaced content and restore proper tag structure

**Loop prevention rules:**

- If user says "it's not corrupted" - STOP making changes and investigate the specific issue
- Make one small change at a time, not multiple rapid attempts
- Ask user to confirm symptoms before assuming solutions
- Never replace entire files without explicit user permission

**Emergency recovery**: If stuck in a loop, stop all changes and ask user for clarification of actual symptoms.

## File Structure Reference

- `index.html`: Main HTML structure and sidebar.
- `css/styles.css`: Sidebar and map styling.
- `js/bootstrap.js`: Map initialization and data loading.
- `js/ui/activeList.js`: Sidebar update logic and feature controls.
- `js/labels.js`: Map label logic.
- `js/loaders/`: GeoJSON and feature loading.

## Sidebar Label Toggle Behaviour (All Active Section)

### Approach and Behaviour

- When a polygon is first added to the 'All Active' section, its name label is shown on the map and the 'Show Name' (??) checkbox is checked by default.
- If the 'Show Name' checkbox is unchecked, the label is immediately removed from the map and will not reappear unless the box is checked again.
- When the sidebar is rebuilt, labels are only created for polygons where the 'Show Name' box is checked. This ensures user intent is respected and prevents unwanted label reappearance.
- Toggling the 'Show Name' checkbox only shows or hides the label, without rebuilding the sidebar or resetting checkbox state.

### Implementation Notes

- The label is managed by calling `ensureLabel(category, key, name, isPoint, layerOrMarker)` when the box is checked, and `removeLabel(category, key)` when unchecked.
- The sidebar logic avoids calling `updateActiveList()` when toggling the label, so the checkbox state persists and the UI remains responsive.
- This approach provides a reliable and intuitive user experience for managing map labels.

---

## 📚 **Documentation Architecture (2025 Q1 Update)**

### **Documentation Structure**

This project now uses a **dual documentation system** for maximum clarity and efficiency:

#### **Application Documentation (`in_app_docs/`)**

- **Purpose**: User-facing features, functionality, and troubleshooting
- **Content**: User guides, API reference, feature documentation
- **Audience**: End users, API consumers, general users
- **Maintenance**: Update when features change or new functionality is added

#### **Project Documentation (`project_docs/`)**

- **Purpose**: Development, architecture, and project management
- **Content**: Architecture analysis, development guides, project templates
- **Audience**: Developers, architects, project managers
- **Maintenance**: Update during development phases and architectural changes

### **Documentation Templates**

All project documentation now uses **standardized templates** for consistency:

- **Project Template**: For new architectural analysis and modernization projects
- **Feature Template**: For documenting new user-facing features
- **Testing Template**: For establishing testing frameworks and procedures
- **Architecture Template**: For system architecture analysis and component mapping
- **Architecture Decision Record**: For individual architectural decisions
- **Architecture Decision Matrix**: For comparing multiple architectural approaches
- **Performance Baselines**: For performance measurement and optimization
- **Lessons Learned**: For capturing project insights and recommendations

### **AI IDE Documentation Guidelines**

When working with documentation:

1. **Use appropriate templates** for new documentation
2. **Maintain consistent structure** across all documents
3. **Cross-reference appropriately** between application and project docs
4. **Update both documentation systems** when making changes
5. **Follow template patterns** for consistency and maintainability

### **Documentation Location Logic**

- **User features, API endpoints, troubleshooting** → `in_app_docs/`
- **Architecture analysis, development guides, project management** → `project_docs/`
- **Templates and standards** → `project_docs/templates/`
- **Project-specific analysis** → `project_docs/` with appropriate template

---

This file provides instructions for using Cursor's AI assistant effectively in this project. Update as needed to reflect new features or changes.

/\*\*

- WillyWeather API
- Documentation: https://www.willyweather.com.au/api/docs/index.html
- API key is imported from config.js for development only.
- For production, use a backend proxy for security.
  \*/
