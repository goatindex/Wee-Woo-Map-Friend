name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  # Job 1: Quality Gates (Always runs)
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Format check
        run: npm run format:check
      
      - name: Security audit
        run: npm audit --audit-level=moderate
      
      - name: License check
        run: npm run license:check

  # Job 2: Unit Tests (Parallel)
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit:coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Job 3: E2E Tests (Parallel)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run E2E tests
        run: npm run test:e2e --project=${{ matrix.browser }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/

  # Job 4: Build Static (GitHub Pages)
  build-static:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build static version
        run: npm run build:static
        env:
          VITE_APP_MODE: static
          VITE_FEATURES_WEATHER: false
          VITE_FEATURES_ALERTS: false
      
      - name: Run performance budget check
        run: npm run build:budget-check
      
      - name: Upload static build
        uses: actions/upload-artifact@v4
        with:
          name: static-build
          path: dist/

  # Job 5: Build Backend (Full Features)
  build-backend:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build backend version
        run: npm run build:backend
        env:
          VITE_APP_MODE: backend
          VITE_FEATURES_WEATHER: true
          VITE_FEATURES_ALERTS: true
          VITE_WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
          VITE_ALERTS_API_URL: ${{ secrets.ALERTS_API_URL }}
      
      - name: Run security scan
        run: npm audit --audit-level=moderate
      
      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: dist/

  # Job 6: Deploy Static (GitHub Pages)
  deploy-static:
    runs-on: ubuntu-latest
    needs: build-static
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download static build
        uses: actions/download-artifact@v4
        with:
          name: static-build
          path: dist/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const deploymentUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/`;
            const body = `ðŸš€ **Static Deployment**: ${deploymentUrl}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 7: Deploy Backend (Cloud)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: dist/
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: dist/

  # Job 8: Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-static, deploy-backend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_URL: ${{ secrets.LHCI_SERVER_URL }}

  # Job 9: Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-static, deploy-backend, performance-monitoring]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "Build failed for ${{ github.ref }}"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "Build successful for ${{ github.ref }}"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

